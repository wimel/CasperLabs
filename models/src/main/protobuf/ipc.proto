syntax = "proto3";

package io.casperlabs.ipc;

message Deploy {
    bytes address = 1; // length 20 bytes
    uint64 timestamp = 2;
    bytes session_code = 3;
    bytes payment_code = 4;
    uint64 gas_limit = 5;
    uint64 gas_price = 6;
    uint64 nonce = 7;
}

message ExecRequest {
    bytes parent_state_hash = 1;
    repeated Deploy deploys = 2;
}

message ExecResponse {
    oneof result {
        ExecResult success = 1;
        RootNotFound missing_parent = 2;
    }
}

message ExecResult {
    repeated DeployResult deploy_results = 2;
}

message RootNotFound {
    bytes hash = 1;
}

message CommitRequest {
    bytes prestate_hash = 1;
    repeated TransformEntry effects = 2;
}

message CommitResult {
  bytes poststate_hash = 1;
}

message CommitResponse {
    oneof result {
        CommitResult success = 1;
        RootNotFound missing_prestate = 2;
        PostEffectsError failed_transform = 3;
    }
}

// Describes operation that are allowed to do on a value under a key.
message Op {
    oneof op_instance {
        ReadOp read = 1;
        WriteOp write = 2;
        AddOp add = 3;
        NoOp noop = 4;
    }
}
message ReadOp {}
message WriteOp {}
message AddOp {}
message NoOp {}
 
message Key {
    oneof key_instance {
        KeyAddress account = 1; // hash of the key of the account, length 20 bytes
        KeyHash hash = 2; // hash of the key of the contract, length 32 bytes
        KeyURef uref = 3; // length 32 bytes TODO: more bytes?
    }
}
message KeyAddress {
    bytes account = 1;
}
message KeyHash {
    bytes key = 1;
}
message KeyURef {
    bytes uref = 1;
}

// oneof cannot contain `repeated` label
message IntList {
    repeated int32 list = 1;
}
message StringList {
    repeated string list = 1;
}
message NamedKey {
    string name = 1;
    Key key = 2;
}

// Things to store under the key in the global state.
message Value {
    oneof value_instance {
        int32 integer = 1;
        bytes byte_arr = 2;
        IntList int_list = 3;
        string string_val = 4;
        Account account = 5;
        Contract contract = 6;
        StringList string_list = 7;
        NamedKey named_key = 8;
    }
}
 
message Account {
    bytes pub_key = 1; // Should have 32 elements
    int64 nonce = 2;
    repeated NamedKey known_urefs = 3;
}
message Contract {
    bytes body = 1;
    repeated NamedKey known_urefs = 2;
}
 
 
// Final transformation to the value under the key.
// It's the outcome of applying all `op`s
message Transform {
    oneof transform_instance {
        TransformIdentity identity = 1;
        TransformAddInt32 add_i32 = 2;
        TransformWrite write = 3;
        TransformAddKeys add_keys = 4;
        TransformFailure failure = 5;
    }
}
 
message TransformIdentity {}
message TransformAddInt32 {
    int32 value = 1;
}
message TransformAddKeys {
    repeated NamedKey value = 1;
}
message TransformWrite {
    Value value = 1;
}
message TransformFailure {
    StorageTypeMismatch error = 1;
}
 
//Errors which may occur while interacting with global state
message StorageError {
    oneof error_instance {
        Key key_not_found = 1;
        StorageTypeMismatch type_mismatch = 2;
        BytesReprError bytes_repr = 3;
        RkvError rkv = 4;
    }
}
message StorageTypeMismatch {
    string expected = 1;
    string found = 2;
}
message BytesReprError {
    oneof error_instance {
        EarlyEndOfStream early_end = 1;
        FormattingError formatting = 2;
        LeftOverBytes left_over = 3;
    }
}
message EarlyEndOfStream {}
message FormattingError {}
message LeftOverBytes {}
message RkvError {
    string error_msg = 1;
}

// Models key value pair of (key, op) entry.
// Required b/c protobuff doesn't support maps natively
message OpEntry {
    Key key = 1;
    Op operation = 2;
}
 
message TransformEntry {
    Key key = 1;
    Transform transform = 2;
}
 
// Returned by ExecutionEngine to consensus layer.
// (Map[Key, Op], Map[Key, Transform]) pair, describes how the deploy modifies the global state.
// op_map and transform_map should be of equal lengths
message ExecutionEffect {
    repeated OpEntry op_map = 1;
    repeated TransformEntry transform_map = 2;
    uint64 cost = 3;
}
 
//TODO: be more specific about errors
message DeployError {
    oneof deploy_errors {
        OutOfGasError gasErr = 1;
        WasmError wasmErr = 2;
    }
}
message OutOfGasError {}
message WasmError {
    string message = 1;
}
 
message DeployResult {
    message Result {
        oneof result {
            ExecutionEffect effects = 1;
            DeployError error = 2;
        }
    }
    Result result = 1;
}

//TODO: be more specific about errors
message PostEffectsError {
    string message = 1;
}

// Definition of the service.
// ExecutionEngine implements server part while Consensus implements client part.
service ExecutionEngineService {
    rpc exec (ExecRequest) returns (ExecResponse) {}
    rpc commit (CommitRequest) returns (CommitResponse) {}
}
